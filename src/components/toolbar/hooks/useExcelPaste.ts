import { useCallback, useEffect } from 'react';
import { TextObject } from '../../../types';
import { parseExcelData, getExcelDataDimensions } from '../utils/toolbarHelpers';
import { dispatchExcelPreviewEvent } from '../utils/fileHandlers';
import { useAdminConfigStore } from '../../../store/adminConfigStore';
import type { SafeSettings } from '../types';

interface UseExcelPasteProps {
  excelPasteData: string;
  showPreview: boolean;
  safeSettings: SafeSettings;
  textObjects: TextObject[];
  addTextObjects: (objects: Omit<TextObject, 'id'>[]) => Promise<string[]>;
  deleteTextObjects: (ids: string[]) => Promise<void>;
  onDataChange: (data: string) => void;
  onPreviewChange: (show: boolean) => void;
}

export const useExcelPaste = ({
  excelPasteData,
  showPreview,
  safeSettings,
  textObjects,
  addTextObjects,
  deleteTextObjects,
  onDataChange,
  onPreviewChange,
}: UseExcelPasteProps) => {

  // ÏóëÏÖÄ Îç∞Ïù¥ÌÑ∞Ïùò Ï∞®Ïõê Í≥ÑÏÇ∞
  const dataDimensions = getExcelDataDimensions(excelPasteData);

  // ÏóëÏÖÄ ÏÖÄ ÏÉùÏÑ± Ìï®Ïàò
  const handleCreateExcelCells = useCallback(async () => {
    const parsedData = parseExcelData(excelPasteData);
    if (parsedData.length === 0) {
      alert('Î∂ôÏó¨ÎÑ£ÏùÑ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }

    const { 
      startPosition, 
      cellWidth, 
      cellHeight, 
      fontColor, 
      maxRows = 100,
      maxCols = 50
    } = safeSettings.admin.excelPasteSettings;
    
    const groupId = `excel-input-${Date.now()}`;
    const cells: Omit<TextObject, 'id'>[] = [];

    const actualRows = Math.min(parsedData.length, maxRows);
    const rowLengths = parsedData.map(row => row.length);
    const maxRowLength = rowLengths.length > 0 ? Math.max(...rowLengths) : 0;
    const actualCols = Math.min(maxRowLength, maxCols);

    for (let row = 0; row < actualRows; row++) {
      for (let col = 0; col < actualCols; col++) {
        const cellText = parsedData[row]?.[col] || '';
        
        const cellObject: Omit<TextObject, 'id'> = {
          x: startPosition.x + col * cellWidth,
          y: startPosition.y + row * cellHeight,
          width: cellWidth,
          height: cellHeight,
          text: cellText,
          fontSize: 32, // Í∏∞Î≥∏ Ìè∞Ìä∏ ÌÅ¨Í∏∞ 32Î°ú Î≥ÄÍ≤Ω
          textStyle: {
            color: fontColor,
            bold: true, // Î≥ºÎìú Ï†ÅÏö©
            italic: false,
            horizontalAlign: 'center',
            verticalAlign: 'middle',
            fontFamily: 'Arial'
          },
          boxStyle: {
            backgroundColor: 'transparent', // Î∞∞Í≤Ω ÏóÜÏùå
            backgroundOpacity: 1,
            borderColor: '#d1d5db',
            borderWidth: 1,
            borderRadius: 0
          },
          permissions: {
            editable: true,
            movable: false,
            resizable: false,
            deletable: false,
          },
          zIndex: 1000 + row * actualCols + col, // ÏóëÏÖÄ ÏÖÄÏùÄ 1000-9999 Î≤îÏúÑ
          locked: true,
          visible: true,
          opacity: 1,
          hasCheckbox: false,
          checkboxChecked: false,
          checkboxCheckedColor: '#22c55e',
          checkboxUncheckedColor: '#f3f4f6',
          isEditing: false,
          lastModified: Date.now(),
          groupId: groupId,
          cellType: 'cell',
          cellPosition: { row, col }
        };

        cells.push(cellObject);
      }
    }

    try {
      // Î™®Îì† ÏÖÄÏùÑ Ìïú Î≤àÏóê ÏùºÍ¥Ñ ÏÉùÏÑ± (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
      const cellIds = await addTextObjects(cells);

      // Excel ÏÖÄ ÏùºÍ¥Ñ ÏÉùÏÑ± ÌõÑ DB Ï†ÄÏû• (undo/redo Ï†úÏô∏)
      await useAdminConfigStore.getState().flushDocumentState(false);

      console.log(`üìä Excel ÏÖÄ ÏùºÍ¥Ñ ÏÉùÏÑ± ÏôÑÎ£å: ${cellIds.length}Í∞ú (${actualRows}x${actualCols})`);
      alert(`${actualRows}x${actualCols} ÏÖÄÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.`);
      onDataChange('');
      onPreviewChange(false);
      dispatchExcelPreviewEvent('', false);
    } catch (error) {
      console.error('ÏóëÏÖÄ ÏÖÄ ÏÉùÏÑ± Ïã§Ìå®:', error);
      alert('ÏÖÄ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }, [excelPasteData, safeSettings.admin.excelPasteSettings, addTextObjects, onDataChange, onPreviewChange]);

  // ÏóëÏÖÄ ÏÖÄ Í∑∏Î£π ÏÇ≠Ï†ú Ìï®Ïàò
  const handleDeleteExcelCellGroups = useCallback(async () => {
    const excelCells = textObjects.filter(obj => 
      obj.groupId && obj.groupId.startsWith('excel-input-')
    );

    if (excelCells.length === 0) {
      alert('ÏÇ≠Ï†úÌï† ÏóëÏÖÄ ÏÖÄÏù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    }

    const groupCount = new Set(excelCells.map(cell => cell.groupId)).size;
    
    const confirmMessage = `${groupCount}Í∞úÏùò ÏóëÏÖÄ Í∑∏Î£π (Ï¥ù ${excelCells.length}Í∞ú ÏÖÄ)ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`;
    if (!confirm(confirmMessage)) {
      return;
    }

    try {
      // Î™®Îì† Excel ÏÖÄÏùÑ Ìïú Î≤àÏóê ÏùºÍ¥Ñ ÏÇ≠Ï†ú (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
      const cellIds = excelCells.map(cell => cell.id);
      await deleteTextObjects(cellIds);

      // ÏÇ≠Ï†ú ÏôÑÎ£å ÌõÑ Î©îÎ™®Î¶¨ ÏÉÅÌÉúÍ∞Ä FirebaseÏôÄ ÎèôÍ∏∞ÌôîÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
      await new Promise(resolve => setTimeout(resolve, 100));

      // ÏÇ≠Ï†úÎêú ÏÖÄÎì§Ïù¥ Î©îÎ™®Î¶¨ÏóêÏÑú ÏôÑÏ†ÑÌûà Ï†úÍ±∞ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
      const adminStore = useAdminConfigStore.getState();
      const remainingCells = adminStore.textObjects.filter(obj =>
        cellIds.includes(obj.id)
      );

      if (remainingCells.length > 0) {
        console.warn(`‚ö†Ô∏è ÏÇ≠Ï†úÎêú ÏÖÄÎì§Ïù¥ Î©îÎ™®Î¶¨Ïóê ÎÇ®ÏïÑÏûàÏùå:`, remainingCells);
        // Í∞ïÏ†úÎ°ú Î©îÎ™®Î¶¨ÏóêÏÑú Ï†úÍ±∞
        const updatedTextObjects = adminStore.textObjects.filter(obj =>
          !cellIds.includes(obj.id)
        );
        useAdminConfigStore.setState({ textObjects: updatedTextObjects });
      }

      // Excel ÏÖÄ ÏùºÍ¥Ñ ÏÇ≠Ï†ú ÌõÑ DB Ï†ÄÏû• (undo/redo Ï†úÏô∏)
      await adminStore.flushDocumentState(false);

      console.log(`üóëÔ∏è Excel ÏÖÄ ÏùºÍ¥Ñ ÏÇ≠Ï†ú ÏôÑÎ£å: ${cellIds.length}Í∞ú (${groupCount}Í∞ú Í∑∏Î£π)`);
      alert(`${groupCount}Í∞ú Í∑∏Î£π (${excelCells.length}Í∞ú ÏÖÄ)Ïù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`);
    } catch (error) {
      console.error('ÏóëÏÖÄ ÏÖÄ ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      alert('ÏÖÄ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }, [textObjects, deleteTextObjects]);

  // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (showPreview && excelPasteData.trim()) {
      dispatchExcelPreviewEvent(excelPasteData, true);
    } else {
      dispatchExcelPreviewEvent('', false);
    }
  }, [showPreview, excelPasteData, safeSettings.admin.excelPasteSettings]);

  return {
    dataDimensions,
    handleCreateExcelCells,
    handleDeleteExcelCellGroups,
  };
};