import React, { useState, useRef, useEffect, useMemo } from 'react';
import { useEditorStore, useAdminConfigStore, useDrawStore } from '../../store';
import { useUndoRedo } from '../../hooks/useUndoRedo';
import { Tool, TextObject } from '../../types';
import { 
  ArrowCounterClockwise, 
  ArrowClockwise, 
  Eraser,
  HandPointing,
  Pencil,
  CheckSquare,
  House,
  Palette,
  Circle
} from 'phosphor-react';

interface Position {
  x: number;
  y: number;
}

interface Size {
  width: number;
  height: number;
}

const ViewFloatingToolbar: React.FC = () => {
  const { currentTool, setCurrentTool, fitToWindow, setSelectedObjectId } = useEditorStore();
  const { addTextObject, settings } = useAdminConfigStore();
  const { penColor, penWidth, setPenColor, setPenWidth } = useDrawStore();
  const { executeUndo, executeRedo, canUndo, canRedo } = useUndoRedo();
  
  // Í∞ÑÏÜåÌôîÎêú ÏÉâÏÉÅ ÌåîÎ†àÌä∏ (ÌôïÏû• ÌåîÎ†àÌä∏ÏóêÏÑú ÏÇ¨Ïö©)
  
  // Ï†ÄÏû•Îêú ÏúÑÏπòÏôÄ ÌÅ¨Í∏∞ Î°úÎìú
  const loadSettings = () => {
    try {
      const savedPosition = localStorage.getItem('viewFloatingToolbar_position');
      const savedSize = localStorage.getItem('viewFloatingToolbar_size');
      
      const defaultPosition = { x: window.innerWidth - 200, y: window.innerHeight - 150 };
      const defaultSize = { width: 180, height: 120 };
      
      return {
        position: savedPosition ? JSON.parse(savedPosition) : defaultPosition,
        size: savedSize ? JSON.parse(savedSize) : defaultSize
      };
    } catch {
      return {
        position: { x: window.innerWidth - 200, y: window.innerHeight - 150 },
        size: { width: 180, height: 120 }
      };
    }
  };

  const savedSettings = loadSettings();
  
  // Ìà¥Î∞î ÏúÑÏπò Î∞è ÌÅ¨Í∏∞ ÏÉÅÌÉú
  const [position, setPosition] = useState<Position>(savedSettings.position);
  const [size, setSize] = useState<Size>(savedSettings.size);
  
  // Ï¥àÍ∏∞ ÎßàÏö¥Ìä∏ Ïãú Í≤ΩÍ≥Ñ Ï≤¥ÌÅ¨
  useEffect(() => {
    const constrainedPosition = constrainToViewport(savedSettings.position, savedSettings.size);
    if (constrainedPosition.x !== savedSettings.position.x || constrainedPosition.y !== savedSettings.position.y) {
      setPosition(constrainedPosition);
      saveSettings(constrainedPosition, savedSettings.size);
    }
  }, []);
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragOffset, setDragOffset] = useState<Position>({ x: 0, y: 0 });
  const [showColorPalette, setShowColorPalette] = useState(false);
  const [showSizeAdjuster, setShowSizeAdjuster] = useState(false);
  
  const toolbarRef = useRef<HTMLDivElement>(null);

  // ÏúÑÏπò Î∞è ÌÅ¨Í∏∞ Ï†ÄÏû• Ìï®Ïàò
  const saveSettings = (newPosition: Position, newSize: Size) => {
    try {
      localStorage.setItem('viewFloatingToolbar_position', JSON.stringify(newPosition));
      localStorage.setItem('viewFloatingToolbar_size', JSON.stringify(newSize));
    } catch (error) {
      console.warn('Failed to save toolbar settings:', error);
    }
  };

  // Í≤ΩÍ≥Ñ Ï≤¥ÌÅ¨ Î∞è Ï°∞Ï†ï Ìï®Ïàò
  const constrainToViewport = (pos: Position, sz: Size): Position => {
    const rectW = sz.width;
    const expandHeight = (showColorPalette || showSizeAdjuster) ? 110 : 0;
    const rectH = sz.height + expandHeight;

    const maxX = Math.max(8, window.innerWidth - rectW - 8);
    const maxY = Math.max(8, window.innerHeight - rectH - 8);
    const minX = 8;
    const minY = 8;

    return {
      x: Math.max(minX, Math.min(maxX, pos.x)),
      y: Math.max(minY, Math.min(maxY, pos.y))
    };
  };

  // ÏÑ§Ï†ïÏù¥ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏùÑ Îïå Í∏∞Î≥∏Í∞í Ï†úÍ≥µ
  const safeSettings = {
    admin: {
      objectCreationPosition: settings?.admin?.objectCreationPosition ?? { x: 200, y: 200 },
      defaultBoxWidth: settings?.admin?.defaultBoxWidth ?? 200,
      defaultBoxHeight: settings?.admin?.defaultBoxHeight ?? 60,
      defaultFontSize: settings?.admin?.defaultFontSize ?? 18,
      defaultCheckboxSettings: settings?.admin?.defaultCheckboxSettings ?? {
        checkedColor: '#22c55e',
        uncheckedColor: '#f3f4f6',
        checkedBackgroundColor: '#22c55e',
        uncheckedBackgroundColor: '#f3f4f6',
        checkedBackgroundOpacity: 0.2,
        uncheckedBackgroundOpacity: 0.1
      }
    }
  };

  // ÎßàÏö∞Ïä§ Î∞è ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
  useEffect(() => {
    if (!isDragging && !isResizing) {
      return; // ÎìúÎûòÍ∑∏ÎÇò Î¶¨ÏÇ¨Ïù¥Ï¶à Ï§ëÏù¥ ÏïÑÎãàÎ©¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå
    }

    const handlePointerMove = (e: PointerEvent) => {
      if (isDragging) {
        const newPosition = {
          x: e.clientX - dragOffset.x,
          y: e.clientY - dragOffset.y
        };
        const constrainedPosition = constrainToViewport(newPosition, size);
        setPosition(constrainedPosition);
      }
      
      if (isResizing) {
        const rect = toolbarRef.current?.getBoundingClientRect();
        if (rect) {
          const newWidth = Math.max(120, e.clientX - rect.left);
          const newHeight = Math.max(80, e.clientY - rect.top);
          const newSize = { width: newWidth, height: newHeight };
          const constrainedPosition = constrainToViewport(position, newSize);
          setSize(newSize);
          setPosition(constrainedPosition);
        }
      }
    };

    const handlePointerUp = (e: PointerEvent) => {
      if (isDragging || isResizing) {
        // ÎìúÎûòÍ∑∏ÎÇò Î¶¨ÏÇ¨Ïù¥Ï¶à Ï¢ÖÎ£å Ïãú ÏÑ§Ï†ï Ï†ÄÏû•
        saveSettings(position, size);
      }
      setIsDragging(false);
      setIsResizing(false);
      
      // Ìè¨Ïù∏ÌÑ∞ Ï∫°Ï≤ò Ìï¥Ï†ú
      if (toolbarRef.current) {
        try {
          toolbarRef.current.releasePointerCapture(e.pointerId);
        } catch (error) {
          // Ìè¨Ïù∏ÌÑ∞ Ï∫°Ï≤ò Ìï¥Ï†ú Ïã§Ìå®Îäî Î¨¥Ïãú
        }
      }
    };

    // Ìè¨Ïù∏ÌÑ∞ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä (Ìè¨Ïù∏ÌÑ∞ Ï∫°Ï≤òÏôÄ ÏùºÍ¥ÄÏÑ± Ïú†ÏßÄ)
    document.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('pointerup', handlePointerUp);

    return () => {
      // cleanup - Ï∂îÍ∞ÄÎêú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÎßå Ï†úÍ±∞
      document.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('pointerup', handlePointerUp);
    };
  }, [isDragging, isResizing, dragOffset]);

  // ÏúàÎèÑÏö∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ïãú ÏúÑÏπò Ï°∞Ï†ï
  useEffect(() => {
    const handleWindowResize = () => {
      const constrainedPosition = constrainToViewport(position, size);
      if (constrainedPosition.x !== position.x || constrainedPosition.y !== position.y) {
        setPosition(constrainedPosition);
        saveSettings(constrainedPosition, size);
      }
    };

    window.addEventListener('resize', handleWindowResize);
    return () => window.removeEventListener('resize', handleWindowResize);
  }, [position, size, showColorPalette, showSizeAdjuster]);

  // Ìà¥Î∞î Î¶¨ÏÇ¨Ïù¥Ï¶à/ÎÇ¥Ïö© Î≥ÄÌôî ÏûêÎèô Î≥¥Ï†ï
  useEffect(() => {
    if (!toolbarRef.current) return;
    const ro = new ResizeObserver(() => {
      const constrainedPosition = constrainToViewport(position, size);
      if (constrainedPosition.x !== position.x || constrainedPosition.y !== position.y) {
        setPosition(constrainedPosition);
        saveSettings(constrainedPosition, size);
      }
    });
    ro.observe(toolbarRef.current);
    return () => ro.disconnect();
  }, [position, size, showColorPalette, showSizeAdjuster]);

  // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú ÌôïÏû• Ìå®ÎÑê Îã´Í∏∞
  useEffect(() => {
    const onDocPointerDown = (e: PointerEvent) => {
      const target = e.target as HTMLElement;
      if (!toolbarRef.current) return;
      if (!toolbarRef.current.contains(target)) {
        setShowColorPalette(false);
        setShowSizeAdjuster(false);
      }
    };
    document.addEventListener('pointerdown', onDocPointerDown);
    return () => document.removeEventListener('pointerdown', onDocPointerDown);
  }, []);

  // ÌÜµÌï© Ìè¨Ïù∏ÌÑ∞ Ìà¥Î∞î ÎìúÎûòÍ∑∏ Ìï∏Îì§Îü¨ (iPhone/iPad Safari Ìò∏Ìôò)
  const handleToolbarPointerDown = (e: React.PointerEvent) => {
    // Î≤ÑÌäºÏù¥ÎÇò Î¶¨ÏÇ¨Ïù¥Ï¶à Ìï∏Îì§Ïù¥ ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå ÎìúÎûòÍ∑∏ ÏãúÏûë
    const target = e.target as HTMLElement;
    if (
      target.closest('button') ||
      target.closest('.resize-handle') ||
      target.closest('input') ||
      target.classList.contains('no-drag')
    ) {
      return;
    }
    
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
    
    // Ìè¨Ïù∏ÌÑ∞ Ï∫°Ï≤òÎ°ú ÎìúÎûòÍ∑∏ Ï§ë Ìè¨Ïù∏ÌÑ∞Í∞Ä Î≤óÏñ¥ÎÇòÎèÑ Ï∂îÏ†Å Í∞ÄÎä•
    try {
      e.currentTarget.setPointerCapture(e.pointerId);
    } catch (error) {
      // Ìè¨Ïù∏ÌÑ∞ Ï∫°Ï≤ò Ïã§Ìå®Îäî Î¨¥Ïãú (ÏùºÎ∂Ä Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÏßÄÏõêÌïòÏßÄ ÏïäÏùå)
    }
    
    const rect = toolbarRef.current?.getBoundingClientRect();
    if (rect) {
      setDragOffset({
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      });
    }
    
    if (import.meta.env.DEV) {
      console.log(`üîß Floating Toolbar drag started with ${e.pointerType}`);
    }
  };

  // ÌÜµÌï© Ìè¨Ïù∏ÌÑ∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ìï∏Îì§Îü¨ (iPhone/iPad Safari Ìò∏Ìôò)
  const handleResizePointerStart = (e: React.PointerEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsResizing(true);
    
    // Ìè¨Ïù∏ÌÑ∞ Ï∫°Ï≤òÎ°ú Î¶¨ÏÇ¨Ïù¥Ï¶à Ï§ë Ìè¨Ïù∏ÌÑ∞Í∞Ä Î≤óÏñ¥ÎÇòÎèÑ Ï∂îÏ†Å Í∞ÄÎä•
    try {
      e.currentTarget.setPointerCapture(e.pointerId);
    } catch (error) {
      // Ìè¨Ïù∏ÌÑ∞ Ï∫°Ï≤ò Ïã§Ìå®Îäî Î¨¥Ïãú (ÏùºÎ∂Ä Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÏßÄÏõêÌïòÏßÄ ÏïäÏùå)
    }
    
    if (import.meta.env.DEV) {
      console.log(`üîß Floating Toolbar resize started with ${e.pointerType}`);
    }
  };

  const handleToolChange = (tool: Tool) => {
    setCurrentTool(tool);
    if (tool !== 'pen') {
      setShowColorPalette(false);
      setShowSizeAdjuster(false);
    }
  };

  const handleCheckboxCreate = async () => {
    // admin ÏÑ§Ï†ïÎêú ÏúÑÏπò ÏÇ¨Ïö©
    const { x, y } = safeSettings.admin.objectCreationPosition;
    
    const { 
      checkedColor, 
      uncheckedColor, 
      checkedBackgroundColor, 
      uncheckedBackgroundColor,
      checkedBackgroundOpacity,
      uncheckedBackgroundOpacity
    } = safeSettings.admin.defaultCheckboxSettings;
    
    const newCheckboxObject: Omit<TextObject, 'id'> = {
      x,
      y,
      width: safeSettings.admin.defaultBoxWidth,
      height: safeSettings.admin.defaultBoxHeight,
      text: 'ÏÉà Ï≤¥ÌÅ¨Î∞ïÏä§',
      hasCheckbox: true,
      checkboxChecked: false,
      checkboxCheckedColor: checkedColor,
      checkboxUncheckedColor: uncheckedColor,
      checkedBackgroundColor: checkedBackgroundColor,
      uncheckedBackgroundColor: uncheckedBackgroundColor,
      checkedBackgroundOpacity: checkedBackgroundOpacity,
      uncheckedBackgroundOpacity: uncheckedBackgroundOpacity,
      boxStyle: {
        backgroundColor: '#ffffff',
        backgroundOpacity: 1,
        borderColor: '#000000',
        borderWidth: 1,
        borderRadius: 8, // ÎùºÏö¥Îî© Ï≤òÎ¶¨ Ï∂îÍ∞Ä
      },
      fontSize: safeSettings.admin.defaultFontSize,
      textStyle: {
        color: '#000000',
        fontFamily: 'Arial, sans-serif',
        bold: false,
        italic: false,
        horizontalAlign: 'left',
        verticalAlign: 'middle'
      },
      permissions: {
        movable: true,
        resizable: true,
        deletable: true
      },
      zIndex: Date.now(),
      locked: false,
      visible: true,
      opacity: 1,
      isEditing: true,
      lastModified: Date.now()
    };

    try {
      // Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉùÏÑ±ÌïòÍ≥† ÏÉàÎ°ú ÏÉùÏÑ±Îêú ID Î∞õÍ∏∞
      const newObjectId = await addTextObject(newCheckboxObject);
      
      // ÏÉàÎ°ú ÏÉùÏÑ±Îêú Ï≤¥ÌÅ¨Î∞ïÏä§ ÏûêÎèô ÏÑ†ÌÉù
      setSelectedObjectId(newObjectId);
      
      // Í∞ÄÏÉÅ ÌÇ§Î≥¥Îìú ÌôúÏÑ±Ìôî (ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ)
      setTimeout(() => {
        window.dispatchEvent(new CustomEvent('activateVirtualKeyboard', {
          detail: { objectId: newObjectId }
        }));
      }, 100);
      
      if (import.meta.env.DEV) {
        console.log(`‚úÖ Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉùÏÑ± Î∞è ÏÑ†ÌÉù ÏôÑÎ£å: ${newObjectId}`);
      }
    } catch (error) {
      console.error('‚ùå Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉùÏÑ± Ïã§Ìå®:', error);
    }
  };

  const handleColorSelect = (color: string) => {
    setPenColor(color);
    setShowColorPalette(false);
  };

  // ÌÜ†Í∏Ä Ìï∏Îì§Îü¨Îäî Ïù∏ÎùºÏù∏ÏóêÏÑú Íµ¨ÌòÑÌïòÏó¨ ÎØ∏ÏÇ¨Ïö© Í≤ΩÍ≥† Ï†úÍ±∞

  // 3x3 Í∑∏Î¶¨ÎìúÏóê ÎßûÏ∂ò ÎèôÏ†Å Î≤ÑÌäº/ÏïÑÏù¥ÏΩò ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
  const layoutPadding = 8; // p-2
  const layoutGap = 8; // gap-2
  const { buttonSize, iconSize, minW, minH } = useMemo(() => {
    const gridCols = 3;
    const gridRows = 3;
    const availableW = Math.max(0, size.width - layoutPadding * 2 - layoutGap * (gridCols - 1));
    const availableH = Math.max(0, size.height - layoutPadding * 2 - layoutGap * (gridRows - 1));
    const rawButton = Math.floor(Math.min(availableW / gridCols, availableH / gridRows));
    const clampedButton = Math.max(36, Math.min(72, rawButton || 36));
    const computedIcon = Math.floor(clampedButton * 0.72);
    const minW = layoutPadding * 2 + gridCols * clampedButton + layoutGap * (gridCols - 1);
    const minH = layoutPadding * 2 + gridRows * clampedButton + layoutGap * (gridRows - 1);
    return { buttonSize: clampedButton, iconSize: computedIcon, minW, minH };
  }, [size.width, size.height]);

  return (
    <div
      ref={toolbarRef}
      data-floating-toolbar="true"
      className="fixed bg-white bg-opacity-95 rounded-lg shadow-2xl border border-gray-300 select-none cursor-move"
      style={{
        left: position.x,
        top: position.y,
        width: size.width,
        height: size.height,
        zIndex: 9999,
        minWidth: minW,
        minHeight: minH,
        touchAction: 'none' // iOS SafariÏóêÏÑú ÌÑ∞Ïπò Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
      }}
      onPointerDown={handleToolbarPointerDown}
      onClick={(e) => e.stopPropagation()}
    >
      {/* Ìà¥Î∞î ÎÇ¥Ïö© */}
      <div className="p-2 h-full flex flex-col">
        {/* 3x3 Í≥†Ï†ï Í∑∏Î¶¨Îìú */}
        <div className="grid grid-cols-3 gap-2" style={{ minHeight: buttonSize * 3 }}>
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleToolChange('select');
            }}
            className={`rounded transition-all duration-200 flex items-center justify-center ${
              currentTool === 'select' 
                ? 'bg-blue-500 text-white shadow-md' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            style={{ width: buttonSize, height: buttonSize }}
            title="ÏÑ†ÌÉù ÎèÑÍµ¨"
          >
            <HandPointing size={iconSize * 0.8} weight="duotone" color="#302929" />
          </button>
          
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleToolChange('pen');
            }}
            className={`rounded transition-all duration-200 flex items-center justify-center ${
              currentTool === 'pen' 
                ? 'bg-blue-500 text-white shadow-md' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            style={{ width: buttonSize, height: buttonSize }}
            title="ÌïÑÍ∏∞ ÎèÑÍµ¨"
          >
            <Pencil size={iconSize * 0.8} weight="duotone" color="#302929" />
          </button>
          
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleToolChange('eraser');
            }}
            className={`rounded transition-all duration-200 flex items-center justify-center ${
              currentTool === 'eraser' 
                ? 'bg-blue-500 text-white shadow-md' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            style={{ width: buttonSize, height: buttonSize }}
            title="ÏßÄÏö∞Í∞ú"
          >
            <Eraser size={iconSize * 0.8} weight="duotone" color="#302929" />
          </button>
          
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleCheckboxCreate();
            }}
            className="rounded transition-all duration-200 flex items-center justify-center bg-green-500 text-white hover:bg-green-600 shadow-md"
            style={{ width: buttonSize, height: buttonSize }}
            title="Ï≤¥ÌÅ¨Î∞ïÏä§ Ï∂îÍ∞Ä"
          >
            <CheckSquare size={iconSize * 0.8} weight="duotone" color="#302929" />
          </button>

          {/* Undo/Redo Î≤ÑÌäºÎì§ */}
          <button
            onClick={(e) => {
              e.stopPropagation();
              executeUndo();
            }}
            disabled={!canUndo}
            className={`rounded transition-all duration-200 flex items-center justify-center ${
              canUndo 
                ? 'bg-orange-500 text-white hover:bg-orange-600 shadow-md' 
                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
            }`}
            style={{ width: buttonSize, height: buttonSize }}
            title="ÎêòÎèåÎ¶¨Í∏∞"
          >
            <ArrowCounterClockwise size={iconSize * 0.8} weight="duotone" color="#302929" />
          </button>
          
          <button
            onClick={(e) => {
              e.stopPropagation();
              executeRedo();
            }}
            disabled={!canRedo}
            className={`rounded transition-all duration-200 flex items-center justify-center ${
              canRedo 
                ? 'bg-purple-500 text-white hover:bg-purple-600 shadow-md' 
                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
            }`}
            style={{ width: buttonSize, height: buttonSize }}
            title="Îã§Ïãú Ïã§Ìñâ"
          >
            <ArrowClockwise size={iconSize * 0.8} weight="duotone" color="#302929" />
          </button>

          {/* Ï∞ΩÎßûÏ∂§ Î≤ÑÌäº */}
          <button
            onClick={(e) => {
              e.stopPropagation();
              fitToWindow();
            }}
            className="rounded transition-all duration-200 flex items-center justify-center bg-blue-500 text-white hover:bg-blue-600 shadow-md"
            style={{ width: buttonSize, height: buttonSize }}
            title="Ï∞ΩÎßûÏ∂§"
          >
            <House size={iconSize * 0.8} weight="duotone" color="#302929" />
          </button>

          {/* 8: Color Picker */}
          <button
            onClick={(e) => {
              e.stopPropagation();
              setShowColorPalette((v) => !v);
              setShowSizeAdjuster(false);
            }}
            className="rounded border flex items-center justify-center bg-white hover:bg-gray-50"
            style={{ width: buttonSize, height: buttonSize }}
            title="ÏÉâÏÉÅ ÏÑ†ÌÉù"
          >
            <Palette size={iconSize * 0.9} weight="duotone" color="#302929" />
          </button>

          {/* 9: Size Toggle */}
          <button
            onClick={(e) => {
              e.stopPropagation();
              setShowSizeAdjuster((v) => !v);
              setShowColorPalette(false);
            }}
            className="rounded border flex items-center justify-center bg-white hover:bg-gray-50"
            style={{ width: buttonSize, height: buttonSize }}
            title="ÌÅ¨Í∏∞ Ï°∞Ï†à"
          >
            <Circle size={iconSize * 0.9} weight="duotone" color="#302929" />
          </button>
        </div>

        {/* ÌôïÏû• ÏòÅÏó≠: ÏÉâÏÉÅ ÌåîÎ†àÌä∏ */}
        {showColorPalette && (
          <div className="mt-2 p-2 bg-gray-50 rounded border">
            <div className="flex flex-wrap gap-2 justify-center">
              {['#000000', '#ff0000', '#00a854', '#1d4ed8', '#ff9900', '#ffff00', '#ffffff', '#7c3aed'].map((color) => (
                <button
                  key={color}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleColorSelect(color);
                  }}
                  className="rounded border-2 hover:scale-110 transition-transform"
                  style={{
                    backgroundColor: color,
                    borderColor: penColor === color ? '#000' : '#ccc',
                    width: 24,
                    height: 24
                  }}
                  title={color}
                />
              ))}
            </div>
          </div>
        )}

        {/* ÌôïÏû• ÏòÅÏó≠: ÌÅ¨Í∏∞ Ïä¨ÎùºÏù¥Îçî */}
        {showSizeAdjuster && (
          <div className="mt-2 p-2 bg-gray-50 rounded border flex items-center gap-3">
            <span className="text-xs text-slate-600">ÍµµÍ∏∞</span>
            <input
              type="range"
              min={1}
              max={20}
              step={1}
              value={penWidth}
              onChange={(e) => setPenWidth(Number(e.target.value))}
              className="w-40 no-drag"
            />
            <span className="text-xs font-mono w-6 text-right">{penWidth}</span>
          </div>
        )}
      </div>

      {/* Î¶¨ÏÇ¨Ïù¥Ï¶à Ìï∏Îì§ */}
      <div
        className="resize-handle absolute bottom-0 right-0 w-4 h-4 cursor-se-resize"
        style={{
          touchAction: 'none' // iOS SafariÏóêÏÑú ÌÑ∞Ïπò Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
        }}
        onPointerDown={handleResizePointerStart}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="absolute bottom-1 right-1 w-2 h-2 border-r-2 border-b-2 border-gray-400"></div>
      </div>
    </div>
  );
};

export default ViewFloatingToolbar; 